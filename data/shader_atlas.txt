//example of some shaders compiled
flat basic.vs flat.fs
texture basic.vs texture.fs
depth quad.vs depth.fs
multi basic.vs multi.fs
light_singlepass basic.vs light_singlepass.fs
light_multipass basic.vs light_multipass.fs

uvs basic.vs uvs.fs
normal basic.vs normal.fs

\compute_normalmap

mat3 cotangent_frame(vec3 N, vec3 p, vec2 uv)
{
	// get edge vectors of the pixel triangle
	vec3 dp1 = dFdx( p );
	vec3 dp2 = dFdy( p );
	vec2 duv1 = dFdx( uv );
	vec2 duv2 = dFdy( uv );
	
	// solve the linear system
	vec3 dp2perp = cross( dp2, N );
	vec3 dp1perp = cross( N, dp1 );
	vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
	vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;
 
	// construct a scale-invariant frame 
	float invmax = inversesqrt( max( dot(T,T), dot(B,B) ) );
	return mat3( T * invmax, B * invmax, N );
}

// assume N, the interpolated vertex normal and 
// WP the world position
//vec3 normal_pixel = texture2D( normalmap, uv ).xyz; 
vec3 perturbNormal(vec3 N, vec3 WP, vec2 uv, vec3 normal_pixel)
{
	normal_pixel = normal_pixel * 255./127. - 128./127.;
	mat3 TBN = cotangent_frame(N, WP, uv);
	return normalize(TBN * normal_pixel);
}


\basic.vs

#version 330 core

in vec3 a_vertex;
in vec3 a_normal;
in vec2 a_coord;
in vec4 a_color;

uniform vec3 u_camera_pos;

uniform mat4 u_model;
uniform mat4 u_viewprojection;

//this will store the color for the pixel shader
out vec3 v_position;
out vec3 v_world_position;
out vec3 v_normal;
out vec2 v_uv;
out vec4 v_color;

uniform float u_time;

void main()
{	
	//calcule the normal in camera space (the NormalMatrix is like ViewMatrix but without traslation)
	v_normal = (u_model * vec4( a_normal, 0.0) ).xyz;
	
	//calcule the vertex in object space
	v_position = a_vertex;
	v_world_position = (u_model * vec4( v_position, 1.0) ).xyz;
	
	//store the color in the varying var to use it from the pixel shader
	v_color = a_color;

	//store the texture coordinates
	v_uv = a_coord;

	//calcule the position of the vertex using the matrices
	gl_Position = u_viewprojection * vec4( v_world_position, 1.0 );
}

\quad.vs

#version 330 core

in vec3 a_vertex;
in vec2 a_coord;
out vec2 v_uv;

void main()
{	
	v_uv = a_coord;
	gl_Position = vec4( a_vertex, 1.0 );
}

\flat.fs

#version 330 core

uniform vec4 u_color;

out vec4 FragColor;

void main()
{
	FragColor = u_color;
}


\texture.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

out vec4 FragColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

	FragColor = color;
}


\multi.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

layout(location = 0) out vec4 FragColor;
layout(location = 1) out vec4 NormalColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, uv );

	if(color.a < u_alpha_cutoff)
		discard;

	vec3 N = normalize(v_normal);

	FragColor = color;
	NormalColor = vec4(N,1.0);
}

\light_singlepass.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;

uniform vec4 u_color;
uniform vec3 u_emissive_factor;
uniform float u_material_shininess;

uniform sampler2D u_texture;
uniform sampler2D u_metallic_roughness_texture;
uniform sampler2D u_emissive_texture;
uniform sampler2D u_normalmap_texture;

uniform float u_time;
uniform float u_alpha_cutoff;
uniform vec3 u_camera_position;

uniform vec3 u_ambient_light;

const int MAX_LIGHTS = 5; 
uniform int u_num_lights;

uniform vec3 u_light_color[MAX_LIGHTS];
uniform float u_light_intensity[MAX_LIGHTS];
uniform float u_light_max_distance[MAX_LIGHTS];
uniform float u_light_cone_angle[MAX_LIGHTS];
uniform float u_light_exponent[MAX_LIGHTS];

uniform int u_light_type[MAX_LIGHTS];
uniform vec3 u_light_position[MAX_LIGHTS];
uniform vec3 u_light_direction[MAX_LIGHTS]; 

//layout(location = 0) 
out vec4 FragColor;

#include "compute_normalmap"

void main()
{
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

	vec3 light = vec3(0.0);

	//Phong
	vec3 N = normalize(v_normal);
	//vec3 normal_pixel = texture2D(u_normalmap_texture,v_uv).xyz;
	//N = perturbNormal(N, v_world_position, v_uv, normal_pixel);

	for( int i=0; i< MAX_LIGHTS; i++){
			
		if(i< u_num_lights){
			
			vec3 L;
			float att_factor = (1.0);

			if(u_light_type[i] == 2){	//directional light
				L = -normalize(u_light_direction[i]);
			}
			else{					// Point and spot light
				L = u_light_position[i]-v_world_position;
		
				//u_light_distance
				L = normalize(L);

				//attenuation
				float light_distance = length(u_light_position[i] - v_world_position);	//Compute dist
				att_factor = u_light_max_distance[i] - light_distance;			//Compute linear att factor
				att_factor /= u_light_max_distance[i];		//Normalize
				att_factor = max(att_factor,0.0);		//No negative values


			}

			//SpotLight
			float spot_factor = 1.0;

			if(u_light_type[i] == 1){	//Spot light
		
				vec3 D = normalize(u_light_direction[i]);
				float spot_cosine = dot(D,-L);

				//Comprovar cos(u_light_cone_angle)

				if(spot_cosine >= cos(radians(u_light_cone_angle[i]))){	//inside the spot
					spot_factor = pow(spot_cosine,u_light_exponent[i]);
				}
				else{	//Outside spot
					spot_factor = 0.0;	//?????
				}
			}

			float NdotL = clamp( dot(N,L), 0.0,1.0);

			//Final
			light += (NdotL * u_light_color[i] * u_light_intensity[i] * spot_factor * att_factor);
		}
	}

	//occlusion
	light += u_ambient_light * texture(u_metallic_roughness_texture,v_uv).x;

	color.xyz *= light;

	//Emissive
	color.xyz += u_emissive_factor * texture(u_emissive_texture,v_uv).xyz;

	FragColor = color;
}

\light_multipass.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;

uniform vec4 u_color;
uniform vec3 u_emissive_factor;
uniform float u_material_shininess;

uniform sampler2D u_texture;
uniform sampler2D u_metallic_roughness_texture;
uniform sampler2D u_emissive_texture;
uniform sampler2D u_normalmap_texture;

uniform float u_time;
uniform float u_alpha_cutoff;
uniform vec3 u_camera_position;

uniform vec3 u_ambient_light;

const int MAX_LIGHTS = 5; 
uniform int u_num_lights;

uniform vec3 u_light_color;
uniform float u_light_intensity;
uniform float u_light_max_distance;
uniform float u_light_cone_angle;
uniform float u_light_exponent;

uniform int u_light_type;
uniform vec3 u_light_position;
uniform vec3 u_light_direction; 

//layout(location = 0) 
out vec4 FragColor;

#include "compute_normalmap"

void main()
{
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

	vec3 light = vec3(0.0);

	//Phong
	vec3 N = normalize(v_normal);
	//vec3 N = (v_normal);
	//vec3 normal_pixel = texture2D(u_normalmap_texture,v_uv).xyz;
	//N = perturbNormal(N, v_world_position, v_uv, normal_pixel);
	
	vec3 L;
	//vec3 V=normalize(u_camera_position.xyz-v_world_position);

	float att_factor = (1.0);

	if(u_light_type == 2){	//directional light
		L = -normalize(u_light_direction);
	}
	else{					// Point and spot light
		L = u_light_position-v_world_position;
		
		L = normalize(L);

		//attenuation
		
		float light_distance = length(u_light_position - v_world_position);	//Compute dist
		att_factor = u_light_max_distance - light_distance;			//Compute linear att factor
		att_factor /= u_light_max_distance;		//Normalize
		att_factor = max(att_factor,0.0);		//No negative values

	}


	//SpotLight
	float spot_factor = 1.0;

	if(u_light_type == 1){	//Spot light
		
		vec3 D = normalize(u_light_direction);
		float spot_cosine = dot(D,-L);

		//Comprovar cos(u_light_cone_angle)

		if(spot_cosine >= cos(radians(u_light_cone_angle))){	//inside the spot
			spot_factor = pow(spot_cosine,u_light_exponent);
		}
		else{	//Outside spot
			spot_factor = 0.0;	//?????
		}
	}

	vec3 R=normalize(reflect(L,N));

	float NdotL = clamp( dot(N,L), 0.0,1.0);
	//float RdotV = pow( clamp(dot(-R,V),0.0,1.0), u_material_shininess );
	//vec3 specular=material_specular * light_specular * RdotV;

		
	//Final
	light += (NdotL * u_light_color * u_light_intensity * spot_factor * att_factor);
		
	//occlusion
	light += u_ambient_light * texture(u_metallic_roughness_texture,v_uv).x;

	color.xyz *= light;

	//Emissive
	color.xyz += u_emissive_factor * texture(u_emissive_texture,v_uv).xyz;

	FragColor = color;
}

\normal.fs

#version 330 core

in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;

uniform sampler2D u_normalmap_texture;

out vec4 FragColor;

#include "compute_normalmap"

void main()
{
	//vec3 N = normalize(v_normal);
	vec3 N = normalize(v_normal);
	vec3 normal_pixel = texture2D(u_normalmap_texture,v_uv).xyz;
	N = perturbNormal(N, v_world_position, v_uv, normal_pixel);

	//FragColor = vec4(abs(normalize(v_normal)),1.0);
	FragColor = vec4(abs(normalize(N)),1.0);
}

\uvs.fs

#version 330 core

in vec2 v_uv;

out vec4 FragColor;

void main()
{
	
	FragColor = vec4( v_uv,1.0,1.0);
}


\depth.fs

#version 330 core

uniform vec2 u_camera_nearfar;
uniform sampler2D u_texture; //depth map
in vec2 v_uv;
out vec4 FragColor;

void main()
{
	float n = u_camera_nearfar.x;
	float f = u_camera_nearfar.y;
	float z = texture2D(u_texture,v_uv).x;
	float color = n * (z + 1.0) / (f + n - z * (f - n));
	FragColor = vec4(color);
}

\instanced.vs

#version 330 core

in vec3 a_vertex;
in vec3 a_normal;
in vec2 a_coord;

in mat4 u_model;

uniform vec3 u_camera_pos;

uniform mat4 u_viewprojection;

//this will store the color for the pixel shader
out vec3 v_position;
out vec3 v_world_position;
out vec3 v_normal;
out vec2 v_uv;

void main()
{	
	//calcule the normal in camera space (the NormalMatrix is like ViewMatrix but without traslation)
	v_normal = (u_model * vec4( a_normal, 0.0) ).xyz;
	
	//calcule the vertex in object space
	v_position = a_vertex;
	v_world_position = (u_model * vec4( a_vertex, 1.0) ).xyz;
	
	//store the texture coordinates
	v_uv = a_coord;

	//calcule the position of the vertex using the matrices
	gl_Position = u_viewprojection * vec4( v_world_position, 1.0 );
}